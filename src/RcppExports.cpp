// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// updateE
void updateE(const arma::mat& etas, const arma::cube& lambdas, const arma::cube& sigmas, const arma::mat& data, const arma::mat& S_mat, arma::rowvec& pi, arma::mat& z_nk, const bool& hold_z, double& loglik);
RcppExport SEXP _chimeralclustering_updateE(SEXP etasSEXP, SEXP lambdasSEXP, SEXP sigmasSEXP, SEXP dataSEXP, SEXP S_matSEXP, SEXP piSEXP, SEXP z_nkSEXP, SEXP hold_zSEXP, SEXP loglikSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_mat(S_matSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z_nk(z_nkSEXP);
    Rcpp::traits::input_parameter< const bool& >::type hold_z(hold_zSEXP);
    Rcpp::traits::input_parameter< double& >::type loglik(loglikSEXP);
    updateE(etas, lambdas, sigmas, data, S_mat, pi, z_nk, hold_z, loglik);
    return R_NilValue;
END_RCPP
}
// updateAllEtaP
void updateAllEtaP(const arma::mat& data, const arma::cube& lambdas, const arma::cube& sigmas, arma::mat& etas, const arma::mat& alphas, const arma::mat& z_nk);
RcppExport SEXP _chimeralclustering_updateAllEtaP(SEXP dataSEXP, SEXP lambdasSEXP, SEXP sigmasSEXP, SEXP etasSEXP, SEXP alphasSEXP, SEXP z_nkSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z_nk(z_nkSEXP);
    updateAllEtaP(data, lambdas, sigmas, etas, alphas, z_nk);
    return R_NilValue;
END_RCPP
}
// updateOneLambdaP
void updateOneLambdaP(const unsigned int p, const arma::mat& data, const arma::mat& S_mat, arma::cube& lambdas, arma::cube& sigmas, const arma::mat& etas, const arma::mat& alphas, const arma::mat& gamma, const arma::rowvec& pi);
RcppExport SEXP _chimeralclustering_updateOneLambdaP(SEXP pSEXP, SEXP dataSEXP, SEXP S_matSEXP, SEXP lambdasSEXP, SEXP sigmasSEXP, SEXP etasSEXP, SEXP alphasSEXP, SEXP gammaSEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_mat(S_matSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type pi(piSEXP);
    updateOneLambdaP(p, data, S_mat, lambdas, sigmas, etas, alphas, gamma, pi);
    return R_NilValue;
END_RCPP
}
// updateOneAlphaC
void updateOneAlphaC(const unsigned int c, const arma::mat& data, const arma::mat& S_mat, const arma::cube& lambdas, const arma::cube& sigmas, const arma::mat& etas, arma::mat& alphas, const arma::mat& gamma, const arma::rowvec& pi, const unsigned int& nr_maxit, const double& nr_eps);
RcppExport SEXP _chimeralclustering_updateOneAlphaC(SEXP cSEXP, SEXP dataSEXP, SEXP S_matSEXP, SEXP lambdasSEXP, SEXP sigmasSEXP, SEXP etasSEXP, SEXP alphasSEXP, SEXP gammaSEXP, SEXP piSEXP, SEXP nr_maxitSEXP, SEXP nr_epsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type c(cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_mat(S_matSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type nr_maxit(nr_maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type nr_eps(nr_epsSEXP);
    updateOneAlphaC(c, data, S_mat, lambdas, sigmas, etas, alphas, gamma, pi, nr_maxit, nr_eps);
    return R_NilValue;
END_RCPP
}
// equilibriateAllAlphaC
void equilibriateAllAlphaC(arma::cube& lambdas, arma::cube& sigmas, arma::mat& etas, arma::mat& alphas, const double& eqb_tol);
RcppExport SEXP _chimeralclustering_equilibriateAllAlphaC(SEXP lambdasSEXP, SEXP sigmasSEXP, SEXP etasSEXP, SEXP alphasSEXP, SEXP eqb_tolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const double& >::type eqb_tol(eqb_tolSEXP);
    equilibriateAllAlphaC(lambdas, sigmas, etas, alphas, eqb_tol);
    return R_NilValue;
END_RCPP
}
// vech
arma::vec vech(arma::mat x);
RcppExport SEXP _chimeralclustering_vech(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vech(x));
    return rcpp_result_gen;
END_RCPP
}
// updateLambdaC
void updateLambdaC(arma::cube& lambdas, arma::cube& sigmas, const arma::mat& alphas);
RcppExport SEXP _chimeralclustering_updateLambdaC(SEXP lambdasSEXP, SEXP sigmasSEXP, SEXP alphasSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alphas(alphasSEXP);
    updateLambdaC(lambdas, sigmas, alphas);
    return R_NilValue;
END_RCPP
}
// updateEtaC
void updateEtaC(arma::mat& etas, const arma::mat& alphas);
RcppExport SEXP _chimeralclustering_updateEtaC(SEXP etasSEXP, SEXP alphasSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alphas(alphasSEXP);
    updateEtaC(etas, alphas);
    return R_NilValue;
END_RCPP
}
// parameterVector
arma::vec parameterVector(const arma::mat& etas, const arma::cube& lambdas, const arma::mat& alphas, const arma::rowvec& pi, const arma::mat& data);
RcppExport SEXP _chimeralclustering_parameterVector(SEXP etasSEXP, SEXP lambdasSEXP, SEXP alphasSEXP, SEXP piSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(parameterVector(etas, lambdas, alphas, pi, data));
    return rcpp_result_gen;
END_RCPP
}
// runEM
Rcpp::List runEM(unsigned int niter, Rcpp::List state, const unsigned int nr_maxit, const double nr_eps, const unsigned int& holdziters, const bool show_progress);
RcppExport SEXP _chimeralclustering_runEM(SEXP niterSEXP, SEXP stateSEXP, SEXP nr_maxitSEXP, SEXP nr_epsSEXP, SEXP holdzitersSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nr_maxit(nr_maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type nr_eps(nr_epsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type holdziters(holdzitersSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(runEM(niter, state, nr_maxit, nr_eps, holdziters, show_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_chimeralclustering_updateE", (DL_FUNC) &_chimeralclustering_updateE, 9},
    {"_chimeralclustering_updateAllEtaP", (DL_FUNC) &_chimeralclustering_updateAllEtaP, 6},
    {"_chimeralclustering_updateOneLambdaP", (DL_FUNC) &_chimeralclustering_updateOneLambdaP, 9},
    {"_chimeralclustering_updateOneAlphaC", (DL_FUNC) &_chimeralclustering_updateOneAlphaC, 11},
    {"_chimeralclustering_equilibriateAllAlphaC", (DL_FUNC) &_chimeralclustering_equilibriateAllAlphaC, 5},
    {"_chimeralclustering_vech", (DL_FUNC) &_chimeralclustering_vech, 1},
    {"_chimeralclustering_updateLambdaC", (DL_FUNC) &_chimeralclustering_updateLambdaC, 3},
    {"_chimeralclustering_updateEtaC", (DL_FUNC) &_chimeralclustering_updateEtaC, 2},
    {"_chimeralclustering_parameterVector", (DL_FUNC) &_chimeralclustering_parameterVector, 5},
    {"_chimeralclustering_runEM", (DL_FUNC) &_chimeralclustering_runEM, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_chimeralclustering(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
